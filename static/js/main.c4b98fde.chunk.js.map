{"version":3,"sources":["Comments.js","App.js","index.js"],"names":["Container","styled","Line","Title","Content","Comments","id","email","comment","MainContainer","App","useState","data","setData","isEnd","useRef","page","loadRef","getCommentAPI","a","fetch","current","response","json","comments","console","log","setDataApi","useCallback","commentData","length","observerHandler","isIntersecting","useEffect","observer","IntersectionObserver","root","rootMargin","threshold","observe","disconnect","map","x","body","className","ref","ReactDOM","render","document","getElementById"],"mappings":"oMAgBA,I,EAAMA,EAAYC,YAAO,MAAPA,CAAH,wRAeTC,EAAOD,YAAO,MAAPA,CAAH,oDAIJE,EAAQF,YAAO,OAAPA,CAAH,gOAaLG,EAAUH,YAAO,OAAPA,CAAH,0JASEI,EAvDf,YAA2C,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC7B,OACE,eAACR,EAAD,WACE,eAACE,EAAD,WACE,cAACC,EAAD,yBADF,IAC4B,cAACC,EAAD,UAAUE,OAEtC,eAACJ,EAAD,WACE,cAACC,EAAD,oBADF,IACwBI,KAExB,cAACJ,EAAD,sBAPF,IAO0BK,MC4D9B,IAAMC,EAAgBR,YAAO,MAAPA,CAAH,iGAMJS,EAtEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAQC,kBAAO,GACfC,EAAOD,iBAAO,GACdE,EAAUF,mBAEVG,EAAa,uCAAG,8BAAAC,EAAA,+EAEKC,MAAM,GAAD,OAXzB,gDAWyB,kBACVJ,EAAKK,QADK,mBAVpB,KAQU,cAEZC,EAFY,gBAKKA,EAASC,OALd,cAKZC,EALY,OAMlBR,EAAKK,SAAW,EAChBI,QAAQC,IAAIF,GAPM,kBAQXA,GARW,kCAUlBC,QAAQC,IAAR,wBAVkB,0DAAH,qDAcbC,EAAaC,sBAAW,sBAAC,4BAAAT,EAAA,sEACHD,IADG,OAEF,KADrBW,EADuB,QAEbC,SACdhB,EAAMO,SAAU,GAElBR,GAAQ,SAACD,GAAD,4BAAcA,GAAd,YAAuBiB,OALF,2CAM5B,IAUGE,EAAkB,SAAC,GAAY,oBACzBC,iBAAoC,IAAlBlB,EAAMO,SAChCM,KAgBJ,OAZAM,qBAAU,WACR,IAKMC,EAAW,IAAIC,qBAAqBJ,EAL1B,CACdK,KAAM,KACNC,WAAY,MACZC,UAAW,IAKb,OADAJ,EAASK,QAAQtB,EAAQI,SAClB,kBAAMa,EAASM,gBACrB,IAGD,eAAC/B,EAAD,WACGG,EAAK6B,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAAqBpC,GAAIoC,EAAEpC,GAAIC,MAAOmC,EAAEnC,MAAOC,QAASkC,EAAEC,MAA3CD,EAAEpC,OAEnB,qBAAKsC,UAAU,QAAQC,IAAK5B,QC7DlC6B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c4b98fde.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nfunction Comments({ id, email, comment }) {\n  return (\n    <Container>\n      <Line>\n        <Title>Comment Id</Title> <Content>{id}</Content>\n      </Line>\n      <Line>\n        <Title>Email</Title> {email}\n      </Line>\n      <Title>Comment</Title> {comment}\n    </Container>\n  );\n}\n\nconst Container = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 500px;\n  height: 193px;\n  padding: 20px;\n  margin: 12px;\n\n  background: #f8f9fa;\n  border: 0.5px solid #ced4da;\n  box-sizing: border-box;\n  border-radius: 20px;\n`;\n\nconst Line = styled(\"div\")`\n  margin-bottom: 12px;\n`;\n\nconst Title = styled(\"span\")`\n  font-family: SFProDisplay;\n  font-size: 18px;\n  line-height: 21px;\n  font-weight: bold;\n\n  margin-right: 12px;\n  margin-bottom: 2px;\n  /* identical to box height */\n\n  color: #212529;\n`;\n\nconst Content = styled(\"span\")`\n  font-family: SFProDisplay;\n  font-size: 18px;\n  line-height: 21px;\n  /* identical to box height */\n\n  color: #212529;\n`;\n\nexport default Comments;\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport Comments from \"./Comments\";\nimport styled from \"styled-components\";\n\nconst URL = `https://jsonplaceholder.typicode.com/comments`;\nconst LIMIT = 10;\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const isEnd = useRef(false);\n  const page = useRef(1);\n  const loadRef = useRef();\n\n  const getCommentAPI = async () => {\n    try {\n      const response = await fetch(\n        `${URL}?_page=${page.current}&_limit=${LIMIT}`\n      );\n      const comments = await response.json();\n      page.current += 1;\n      console.log(comments);\n      return comments;\n    } catch (e) {\n      console.log(`error: ${e}`);\n    }\n  };\n\n  const setDataApi = useCallback(async () => {\n    const commentData = await getCommentAPI();\n    if (commentData.length === 0) {\n      isEnd.current = true;\n    }\n    setData((data) => [...data, ...commentData]);\n  }, []);\n\n  //const setDataApi = async () => {\n  //  const commentData = await getCommentAPI();\n  //  if (commentData.length === 0) {\n  //    isEnd.current = true;\n  //  }\n  //  setData((data) => [...data, ...commentData]);\n  //};\n\n  const observerHandler = ([entry]) => {\n    if (entry.isIntersecting && isEnd.current !== true) {\n      setDataApi();\n    }\n  };\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 1.0,\n    };\n    const observer = new IntersectionObserver(observerHandler, options);\n\n    observer.observe(loadRef.current);\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <MainContainer>\n      {data.map((x) => (\n        <Comments key={x.id} id={x.id} email={x.email} comment={x.body} />\n      ))}\n      <div className=\"crash\" ref={loadRef} />\n    </MainContainer>\n  );\n}\n\nconst MainContainer = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}